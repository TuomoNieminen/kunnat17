gp2 <- GP(K2)
hist(gp1)
hist(gp2)
str(gp1)
plot(gp1)
plot(gp1, type = "l")
hist(gp2, type = "l")
plot(gp2, type = "l")
plot(gp1, type = "l")
plot(gp2, type = "l")
plot(gp1, type = "l")
plot(gp2, type = "l")
gp1 <- GP(K1)
gp2 <- GP(K2)
plot(gp1, type = "l")
plot(gp2, type = "l")
gp1 <- GP(K1)
gp1 <- GP(K1)
gp2 <- GP(K2)
plot(gp1, type = "l")
plot(gp2, type = "l")
gp1 <- GP(K1)
gp2 <- GP(K2)
plot(gp1, type = "l")
plot(gp2, type = "l")
s <- (1:1000)/100
K1 <- cov_dist_m(s, s)
K2 <- cov_dist_m(s, s, d = 2) # second cov func
diag(K2) <- diag(K2) + 0.00001 # add "jitter"
gp1 <- GP(K1)
gp2 <- GP(K2)
plot(gp1, type = "l")
plot(gp2, type = "l")
plot2d <- function(X) {
require(RColorBrewer); require(MASS)
## compute 2D kernel density, see MASS book, pp. 130-131
z <- kde2d(X[,1], X[,2], n=50)
# plot
k <- 11
my.col <- rev(brewer.pal(k, "RdYlBu"))
plot(X, xlab="X label", ylab="Y label", pch=19, cex=.4)
contour(z, drawlabels=FALSE, nlevels=k, col=my.col, add=TRUE)
abline(h=mean(X[,2]), v=mean(X[,1]), lwd=2)
}
gp_1 <- GP(K1)
gp_2 <- GP(K2)
plot(gp_1, type = "l")
plot(gp_2, type = "l")
gp2_1 <- GP(K1, d = 2)
gp2_1 <- GP(K1, d = 2)
gp2_2 <- GP(K2, d = 2)
plot2d(gp2_1)
plot2d(gp2_1)
plot2d(gp2_2)
gp2_1 <- GP(K1, d = 2)
gp2_2 <- GP(K2, d = 2)
plot2d(gp2_1)
plot2d(gp2_2)
gp2_1 <- GP(K1, d = 2)
gp2_1 <- GP(K1, d = 2)
gp2_2 <- GP(K2, d = 2)
plot2d(gp2_1)
plot2d(gp2_2) # looks weird
cov_dist <- function(s1, s2 = 0, sd2 = 1, l = 1, d = 1) {
sd2*exp(-(abs(s1 - s2)/l)^d)
}
curve(cov_dist, from = -5, to = 5)
curve(cov_dist(x, d = 2), from = -5, to = 5)
curve(cov_dist(x, sd2 = 1, l = 2), from = -5, to = 5)
curve(cov_dist(x, sd2 = 2, l = 2), from = -5, to = 5)
curve(cov_dist(x, sd2 = 1, l = 2), from = -5, to = 5)
curve(cov_dist(x, sd2 = 2, l = 2), from = -5, to = 5)
curve(cov_dist(x, sd = 1, l = 2, d = 2), from = -5, to = 5)
curve(cov_dist(x, sd2 = 1, l = 2, d = 2), from = -5, to = 5)
curve(cov_dist(x, sd2 = 2, l = 2, d = 2), from = -5, to = 5)
curve(cov_dist, from = -5, to = 5)
curve(cov_dist(x, sd2 = 1, l = 2), from = -5, to = 5)
curve(cov_dist(x, sd2 = 2, l = 2), from = -5, to = 5)
curve(cov_dist(x, d = 2), from = -5, to = 5)
curve(cov_dist(x, sd2 = 1, l = 2, d = 2), from = -5, to = 5)
curve(cov_dist(x, sd2 = 2, l = 2, d = 2), from = -5, to = 5)
find_point <- function(max, d = 1) {
p <- 1 # initialize target proportion
s1 <- 0 # initialize comparison location (2nd location is 0 by default)
# update s1 by increments of 0.01 until p > 0.05
while(p > 0.05) p <- cov_dist(s1 <- s1+0.01, d = d) / max
s1
}
find_point(max = cov_dist(0, 0)) # 3
find_point(max = cov_dist(0, 0, d = 2), d =2) # 1.74
find_point <- function(max, d = 1, treshold = 0.05) {
p <- 1 # initialize target proportion
s1 <- 0 # initialize comparison location (2nd location is 0 by default)
# update s1 by increments of 0.01 until p > 0.05
while(p > treshold) p <- cov_dist(s1 <- s1+0.01, d = d) / max
s1
}
find_point(max = cov_dist(0, 0)) # 3
find_point(max = cov_dist(0, 0, d = 2), d =2) # 1.74
curve(cov_dist, from = -5, to = 5, main = "Distance vs exponential covariance",
ylab = "Exponential covariance", xlab = "distance")
curve(cov_dist(x, d =2), from = -5, to = 5, main = "Distance vs exponential covariance 2",
ylab = "Exponential covariance 2", xlab = "distance")
k <- function(h, s = 0, d) cov_dist(s1 = s, s2 = s + h, d = d)
variogram <- function(h, d) k(0, d = d) - k(h, d = d)
curve(variogram(x, d = 1), from = -5, to = 5, main = "Variogram 1")
curve(variogram(x, d = 2), from = -5, to = 5, main = "variogram 2")
curve(variogram(x, d = 1), from = -5, to = 5, main = "Variogram (cov1, sd2 = 1, l = 1)")
curve(variogram(x, sd2 = 2, d = 1), from = -5, to = 5, main = "Variogram (cov1, sd2 = 2, l = 1)")
k <- function(h, s=0, sd2, l, d) cov_dist(s1=s, s2=s+h, sd2=sd2, l=l, d=d)
variogram <- function(h, d, sd2=1, l=1) {
k(0, sd2=sd2, l=l, d=d) - k(h, sd2=sd2, l=l, d=d)
}
curve(variogram(x, d = 1), from = -5, to = 5, main = "Variogram (cov1, sd2 = 1, l = 1)")
curve(variogram(x, sd2 = 2, d = 1), from = -5, to = 5, main = "Variogram (cov1, sd2 = 2, l = 1)")
curve(variogram(x, d = 1), from = -5, to = 5, main = "Variogram (cov1, sd2=1, l=1)")
curve(variogram(x, sd2 = 2, d = 1), from = -5, to = 5, main = "Variogram (cov1, sd2=2, l=1)")
curve(variogram(x, sd2 = 2, l = 2, d = 1), from = -5, to = 5, main = "Variogram (cov1, sd2=2, l=2)")
curve(variogram(x, d = 2), from = -5, to = 5, main = "Variogram (cov2, sd2=1, l=1)")
curve(variogram(x, sd2 = 2, d = 2), from = -5, to = 5, main = "Variogram (cov2, sd2=2, l=1)")
curve(variogram(x, sd2 = 2, l = 2, d = 2), from = -5, to = 5, main = "Variogram (cov2, sd2=2, l=2)")
curve(variogram(x, d = 1), from = -5, to = 5, main = "Variogram (cov1, sd2=1, l=1)")
curve(variogram(x, sd2 = 2, d = 1), from = -5, to = 5, main = "Variogram (cov1, sd2=2, l=1)")
curve(variogram(x, sd2 = 2, l = 2, d = 1), from = -5, to = 5, main = "Variogram (cov1, sd2=2, l=2)")
curve(variogram(x, d = 1), from = -5, to = 5, main = "Variogram (cov1, sd2=1, l=1)")
curve(variogram(x, sd2 = 2, d = 1), from = -5, to = 5, main = "Variogram (cov1, sd2=2, l=1)")
curve(variogram(x, sd2 = 2, l = 2, d = 1), from = -5, to = 5, main = "Variogram (cov1, sd2=2, l=2)")
curve(variogram(x, d = 2), from = -5, to = 5, main = "Variogram (cov2, sd2=1, l=1)")
curve(variogram(x, sd2 = 2, d = 2), from = -5, to = 5, main = "Variogram (cov2, sd2=2, l=1)")
curve(variogram(x, sd2 = 2, l = 2, d = 2), from = -5, to = 5, main = "Variogram (cov2, sd2=2, l=2)")
k <- function(h, s=0, sd2, l, d) {
cov_dist(s1=s, s2=s+h, sd2=sd2, l=l, d=d)
}
variogram <- function(h, d, sd2=1, l=1) {
k(0, sd2=sd2, l=l, d=d) - k(h, sd2=sd2, l=l, d=d)
}
curve(variogram(x, d = 1), from = -5, to = 5, main = "Variogram (cov1, sd2=1, l=1)")
curve(variogram(x, sd2 = 2, d = 1), from = -5, to = 5, main = "Variogram (cov1, sd2=2, l=1)")
curve(variogram(x, sd2 = 2, l = 2, d = 1), from = -5, to = 5, main = "Variogram (cov1, sd2=2, l=2)")
curve(variogram(x, d = 2), from = -5, to = 5, main = "Variogram (cov2, sd2=1, l=1)")
curve(variogram(x, sd2 = 2, d = 2), from = -5, to = 5, main = "Variogram (cov2, sd2=2, l=1)")
curve(variogram(x, sd2 = 2, l = 2, d = 2), from = -5, to = 5, main = "Variogram (cov2, sd2=2, l=2)")
GP <- function(K, mu = 0, d = 1) {
n <- ncol(K)
xx <- matrix(rnorm(n*d), ncol = d)
L <- chol(K)
mu + apply(xx, 2, `%*%`, x = L)
}
s <- (1:1000)/100
K1 <- cov_dist_m(s, s)
K2 <- cov_dist_m(s, s, d = 2) # second cov func
cov_dist_m <- function(S1, S2, sd2 = 1, l = 1, d  = 1) {
sapply(S2, cov_dist, s1 = S1, sd2 = sd2, l = l, d = d)
}
s <- (1:1000)/100
K1 <- cov_dist_m(s, s)
K2 <- cov_dist_m(s, s, d = 2) # second cov func
diag(K2) <- diag(K2) + 0.00001 # add "jitter"
gp_1 <- GP(K1)
gp_2 <- GP(K2)
plot(gp_1, type = "l")
plot(gp_2, type = "l")
plot2d <- function(X) {
require(RColorBrewer); require(MASS)
## compute 2D kernel density, see MASS book, pp. 130-131
z <- kde2d(X[,1], X[,2], n=50)
# plot
k <- 11
my.col <- rev(brewer.pal(k, "RdYlBu"))
plot(X, xlab="X label", ylab="Y label", pch=19, cex=.4)
contour(z, drawlabels=FALSE, nlevels=k, col=my.col, add=TRUE)
abline(h=mean(X[,2]), v=mean(X[,1]), lwd=2)
}
gp2_1 <- GP(K1, d = 2)
gp2_2 <- GP(K2, d = 2)
plot2d(gp2_1)
plot2d(gp2_2) # looks weird
plot2d(gp2_1)
gp2_1 <- GP(K1, d = 2)
gp2_2 <- GP(K2, d = 2)
plot2d(gp2_1)
plot2d(gp2_2) # this looks weird
s <- (1:1000)/100
K1 <- cov_dist_m(s, s)
K2 <- cov_dist_m(s, s, d = 2) # second cov func
diag(K2) <- diag(K2) + 0.000001 # add "jitter"
gp_1 <- GP(K1)
gp_2 <- GP(K2)
plot(gp_1, type = "l")
plot(gp_2, type = "l")
gp2_1 <- GP(K1, d = 2)
gp2_2 <- GP(K2, d = 2)
plot2d(gp2_1)
plot2d(gp2_2) # this looks weird
S <- (0:50)/10
K <- cov_dist_m(S, S)
f <- (1, -1, 0, 2)
f <- c(1, -1, 0, 2)
.S <- (0:50)/10
.S <- (0:50)/10
K <- cov_dist_m(.S, .S)
f <- c(1, -1, 0, 2)
S <- c(0.7, 1.3, 2.4, 3.9)
k = cov_dist
s_ <- 3
.S <- (0:50)/10
K <- cov_dist_m(.S, .S)
f <- c(1, -1, 0, 2)
S <- c(0.7, 1.3, 2.4, 3.9)
k = cov_dist
K1 <- solve(K)
mean <- k(s_, S) %*% K1 %*% f
k(s_, S)
K1
str(K1)
K <- k(S, S)
K1 <- solve(K)
S
K <- k(S, S)
K
K <- cov_dist_m(S, S)
K1 <- solve(K)
K1
mean <- k(s_, S) %*% K1 %*% f
mean
s_
s_ <- -2
K <- cov_dist_m(S, S)
K1 <- solve(K)
mean <- k(s_, S) %*% K1 %*% f
mean
s_ <- 3
K <- cov_dist_m(S, S)
K1 <- solve(K)
k(s_, S)
K1
f
cov <- k(s_, s_) - k(s_, S) %*% K1 %*% k(S, s_)
cov
compute_parameters <- fuction(f, S, s_, k = cov_dist) {
K <- cov_dist_m(S, S)
K1 <- solve(K)
mean <- k(s_, S) %*% K1 %*% f
var <- k(s_, s_) - k(s_, S) %*% K1 %*% k(S, s_)
return(c("mean" = mean[1], "var" = var[1]))
}
compute_parameters <- fuction(f, S, s_, k = cov_dist) {
K <- cov_dist_m(S, S)
K1 <- solve(K)
mean <- k(s_, S) %*% K1 %*% f
var <- k(s_, s_) - k(s_, S) %*% K1 %*% k(S, s_)
return(c("mean" = mean[1], "var" = var[1]))
}
compute_parameters <- function(f, S, s_, k = cov_dist) {
K <- cov_dist_m(S, S)
K1 <- solve(K)
mean_p <- k(s_, S) %*% K1 %*% f
var_p <- k(s_, s_) - k(s_, S) %*% K1 %*% k(S, s_)
return(c("mean" = mean_p[1], "var" = var_p[1]))
}
f <- c(1, -1, 0, 2)
S <- c(0.7, 1.3, 2.4, 3.9)
compute_p <- function(f, S, s_, k = cov_dist) {
K <- cov_dist_m(S, S)
K1 <- solve(K)
mean_p <- k(s_, S) %*% K1 %*% f
var_p <- k(s_, s_) - k(s_, S) %*% K1 %*% k(S, s_)
return(c("mean" = mean_p[1], "var" = var_p[1]))
}
f <- c(1, -1, 0, 2)
S <- c(0.7, 1.3, 2.4, 3.9)
compute_p(3)
compute_p(f, S, 3)
compute_p <- function(f, S, s_, k = cov_dist) {
K <- cov_dist_m(S, S)
K1 <- solve(K)
mean_p <- k(s_, S) %*% K1 %*% f
var_p <- k(s_, s_) - k(s_, S) %*% K1 %*% k(S, s_)
return(c("mean" = mean_p, "var" = var_p))
}
compute_p(f, S, 3)
tmp <- compute_p(f, S, 3)
str(tmp)
S_ <- (0:50)/10
f <- c(1, -1, 0, 2)
S <- c(0.7, 1.3, 2.4, 3.9)
K <- cov_dist_m(S, S)
K1 <- solve(K)
parameters <- sapply(S_, compute_p, f = f, S = S, K1 = K1)
compute_p <- function(f, S, s_, K1, k = cov_dist) {
mean_p <- k(s_, S) %*% K1 %*% f
var_p <- k(s_, s_) - k(s_, S) %*% K1 %*% k(S, s_)
return(c("mean" = mean_p, "var" = var_p))
}
f <- c(1, -1, 0, 2)
S <- c(0.7, 1.3, 2.4, 3.9)
K <- cov_dist_m(S, S)
K1 <- solve(K)
S_ <- (0:50)/10
parameters <- sapply(S_, compute_p, f = f, S = S, K1 = K1)
str(paramteters)
str(parameters)
params <- sapply(S_, compute_p, f = f, S = S, K1 = K1)
parames["ci_up",] <- 1
params["ci_up",] <- 1
compute_p <- function(f, S, s_, K1, k = cov_dist) {
mu <- k(s_, S) %*% K1 %*% f
sd2 <- k(s_, s_) - k(s_, S) %*% K1 %*% k(S, s_)
ci_up <- mu + sqrt(sd2)*1.96
ci_lo <- mu - sqrt(sd2)*1.96
return(c("mean" = mu, "var" = sd2, "ci_up" = ci_up, "ci_lo" = ci_lo))
}
f <- c(1, -1, 0, 2)
S <- c(0.7, 1.3, 2.4, 3.9)
K <- cov_dist_m(S, S)
K1 <- solve(K)
S_ <- (0:50)/10
params <- sapply(S_, compute_p, f = f, S = S, K1 = K1)
str(params)
plot(params["mean", ], type = "l")
lines(params[3:4,])
plot(params["mean", ], type = "l")
lines(params[3,])
lines(params[3,], col = "grey50")
plot(params["mean", ], type = "l", ylim = range(params[3:4,]))
lines(params[3,], col = "grey50")
lines(params[4,], col = "grey50")
plot(params["mean", ], type = "l", ylim = range(params[3:4,]))
lines(params[3,], col = "grey50")
lines(params[4,], col = "grey50")
plot(params["mean", ], col = "red", type = "l", ylim = range(params[3:4,]))
lines(params[3,], col = "grey50")
lines(params[4,], col = "grey50")
plot(S_,params["mean", ], col = "red", type = "l", ylim = range(params[3:4,]))
lines(params[3,], col = "grey50")
lines(params[4,], col = "grey50")
plot(S_,params["mean", ], col = "red", type = "l", ylim = range(params[3:4,]))
lines(S_,params[3,], col = "grey50")
lines(S_,params[4,], col = "grey50")
f <- c(1, -1, 0, 2)
S <- c(0.7, 1.3, 2.4, 3.9)
K <- cov_dist_m(S, S)
K1 <- solve(K)
S_ <- (0:50)/10
params <- sapply(S_, compute_p, f = f, S = S, K1 = K1)
plot(S_,params["mean", ], col = "red", type = "l", ylim = range(params[3:4,]))
lines(S_,params[3,], col = "grey50")
lines(S_,params[4,], col = "grey50")
samples <- mapply(rnorm(n = 1), params["mean",], sqrt(params["var",]))
samples <- mapply(rnorm, params["mean",], sqrt(params["var",]), n = 1)
points(S_, samples)
points(S_, samples)
points(S_, samples, lty = 20)
plot(S_,params["mean", ], col = "red", type = "l", ylim = range(params[3:4,]))
lines(S_,params[3,], col = "grey50")
lines(S_,params[4,], col = "grey50")
samples <- mapply(rnorm, params["mean",], sqrt(params["var",]), n = 1)
points(S_, samples, lty = 20)
points(S_, samples, lty = 16)
?points
plot(S_,params["mean", ], col = "red", type = "l", ylim = range(params[3:4,]))
lines(S_,params[3,], col = "grey50")
lines(S_,params[4,], col = "grey50")
samples <- mapply(rnorm, params["mean",], sqrt(params["var",]), n = 1)
points(S_, samples, pch = 16)
plot(S_,params["mean", ], col = "red", type = "l", ylim = range(params[3:4,]))
lines(S_,params[3,], col = "grey50")
lines(S_,params[4,], col = "grey50")
samples <- mapply(rnorm, params["mean",], sqrt(params["var",]), n = 1)
points(S_, samples, pch = 20)
plot(S_,params["mean", ], col = "red", type = "l", ylim = range(params[3:4,]))
lines(S_,params[3,], col = "grey50")
lines(S_,params[4,], col = "grey50")
samples <- mapply(rnorm, params["mean",], sqrt(params["var",]), n = 1)
points(S_, samples, pch = 20, col = "green")
points(S_, samples, pch = 20, col = "blue")
params <- sapply(S_, compute_p, f = f, S = S, K1 = K1)
plot(S_,params["mean", ], col = "red", type = "l", ylim = range(params[3:4,]))
lines(S_,params[3,], col = "grey50")
lines(S_,params[4,], col = "grey50")
samples <- mapply(rnorm, params["mean",], sqrt(params["var",]), n = 1)
points(S_, samples, pch = 20, col = "blue")
Sys.getenv("PATH")
Sys.getenv("PATH")
system('g++ -v')
system('where make')
dotR <- file.path(Sys.getenv("HOME"), ".R")
if (!file.exists(dotR))
dir.create(dotR)
M <- file.path(dotR, "Makevars")
if (!file.exists(M))
file.create(M)
cat("\nCXXFLAGS=-O3 -mtune=native -march=native -Wno-unused-variable -Wno-unused-function",
file = M, sep = "\n", append = TRUE)
cat('Sys.setenv(BINPREF = "C:/Rtools/mingw_$(WIN)/bin/")',
file = file.path(Sys.getenv("HOME"), ".Rprofile"),
sep = "\n", append = TRUE)
cat(readLines(M), sep = "\n")
install.packages("rstan", repos = "https://cloud.r-project.org/", dependencies=TRUE)
fx <- inline::cxxfunction( signature(x = "integer", y = "numeric" ) , '
return ScalarReal( INTEGER(x)[0] * REAL(y)[0] ) ;
' )
cat('Sys.setenv(BINPREF = "C:/R/Rtools/mingw_$(WIN)/bin/")',
file = file.path(Sys.getenv("HOME"), ".Rprofile"),
sep = "\n", append = TRUE)
fx <- inline::cxxfunction( signature(x = "integer", y = "numeric" ) , '
return ScalarReal( INTEGER(x)[0] * REAL(y)[0] ) ;
' )
system('where make')
install.packages("rstan", repos = "https://cloud.r-project.org/", dependencies=TRUE)
fx <- inline::cxxfunction( signature(x = "integer", y = "numeric" ) , '
return ScalarReal( INTEGER(x)[0] * REAL(y)[0] ) ;
' )
file.path(Sys.getenv("HOME"), ".Rprofile")
fx <- inline::cxxfunction( signature(x = "integer", y = "numeric" ) , '
return ScalarReal( INTEGER(x)[0] * REAL(y)[0] ) ;
' )
install.packages("rstan", repos = "https://cloud.r-project.org/", dependencies=TRUE)
fx <- inline::cxxfunction( signature(x = "integer", y = "numeric" ) , '
return ScalarReal( INTEGER(x)[0] * REAL(y)[0] ) ;
' )
fx( 2L, 5 ) # should be 10
setwd("C:/Users/Tuomo/Dropbox/GitHub/Kuntavaalit2017/kunnat17")
hs <- get(load("data/hs-vaalikone2017.Rda"))
kunnat <- unique(hs$Kunta)
kunnat <- sort(kunnat)
puolueet <- sort(as.character(unique(hs$Puolue)))
Encoding(names(hs)) <- "ISO-8859-1"
names(hs)
?Encoding
setwd("C:/Users/Tuomo/Dropbox/GitHub/Kuntavaalit2017")
name <- "hs-vaalikonedata-28-3-2017.csv"
hs <- read_delim(name,";", escape_double = FALSE, trim_ws = TRUE)
modify <- function(x){
x <- gsub("\u0084", "ä", x)
x <- gsub("\u008e", "Ä", x)
x <- gsub("\u0094", "ö", x)
x <- gsub("\u009e", "Ö", x)
x <- enc2utf8(x)
}
library(readr)
name <- "hs-vaalikonedata-28-3-2017.csv"
hs <- read_delim(name,";", escape_double = FALSE, trim_ws = TRUE)
modify <- function(x){
x <- gsub("\u0084", "ä", x)
x <- gsub("\u008e", "Ä", x)
x <- gsub("\u0094", "ö", x)
x <- gsub("\u009e", "Ö", x)
x <- enc2utf8(x)
}
names(hs) <- modify(names(hs))
is_string <- sapply(hs, is.character)
hs <- dplyr::mutate_if(hs, is_string, modify)
items <- hs[, -c(1:4, ncol(hs))]
items <- lapply(items, factor, levels = 1:5, labels = c("Täysin eri mieltä", "Jokseenkin eri mieltä","En osaa sanoa", "Jokseenkin samaa mieltä", "Täysin samaa mieltä"))
names(hs)
Encoding(hs)
Encoding(names(hs))
new_hs <- cbind(hs[, c(1:4, ncol(hs))], items)
names(new_hs)
names(new_hs) <- enc2utf8(names(new_hs))
names(new_hs)
names(new_hs) %>% Encoding
library(dplyr)
names(new_hs) %>% Encoding
names(new_hs)[127]
save(file = "kunnat17/data/hs-vaalikone2017.Rda", new_hs)
setwd("C:/Users/Tuomo/Dropbox/GitHub/Kuntavaalit2017/kunnat17")
shiny::runApp()
library(rsconnect)
deployApp()
runApp()
runApp()
?renderUI
runApp()
runApp()
runApp()
runApp()
runApp()
?droplevels
?levels
runApp()
hs <- get(load("data/hs-vaalikone2017.Rda"))
x <- hs
x <- dropLevels(x)
x <- droplevels(x)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?selectizeInput
runApp()
runApp()
